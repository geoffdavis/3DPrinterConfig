# ----- Menu overrides
[menu __main __octoprint]
type: disabled

[menu __main __sdcard __reprint]
type: command
name: Reprint Last
enable: {(not printer.idle_timeout.state == "Printing")}
gcode:
    {% set state = printer.print_stats.state %}
    {% set file = printer.print_stats.filename %}
    {% if state == 'printing' %}
        { action_respond_info("Print is still running") }
    {% elif not file.endswith("gcode") %}
        { action_respond_info("No file to reprint") }
    {% else %}
        SDCARD_PRINT_FILE FILENAME="{file}"
        { action_respond_info("Print job restarted.") }
    {% endif %}


[menu __main __control __heatsoak]
type: command
enable: {printer.idle_timeout.state != "Printing"}
name: Heatsoak chamber
index: 0
gcode:
    _HEATSOAK move=0

[menu __main __control __pause]
type: command
enable: {printer.idle_timeout.state == "Printing"}
name: Pause printing
index: 1
gcode:
    PAUSE

[menu __main __control __resume]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: Resume printing
index: 1
gcode:
    RESUME

[menu __main __control __abort]
type: command
enable: {printer.idle_timeout.state == "Printing"}
name: Abort printing
index: 0
gcode:
    CANCEL_PRINT

### FAN Menu ###
[menu __main __control __case_fans]
type: list
name: Case Fans
index: 12

# Bed Fans
[menu __main __control __case_fans __bedfanonoff]
type: input
enable: {'fan_generic bed_rear_fan' in printer}
name: Bed: {'ON ' if menu.input else 'OFF'}
input: {printer['fan_generic bed_rear_fan'].speed}
input_min: 0
input_max: 1
input_step: 1
gcode:
    #M106 S{255 if menu.input else 0}
    SET_FAN_SPEED FAN=bed_rear_fan SPEED={menu.input}

[menu __main __control __case_fans __bedfanspeed]
type: input
enable: {'fan_generic bed_rear_fan' in printer}
name: Bed speed: {'%3d' % (menu.input*100)}%
input: {printer['fan_generic bed_rear_fan'].speed}
input_min: 0
input_max: 1
input_step: 0.01
gcode:
    #M106 S{'%d' % (menu.input*255)}
    SET_FAN_SPEED FAN=bed_rear_fan SPEED={menu.input}

# Filter Fans
[menu __main __control __case_fans __filterfanonoff]
type: input
enable: {'fan_generic filter' in printer}
name: Filter: {'ON ' if menu.input else 'OFF'}
input: {printer['fan_generic filter'].speed}
input_min: 0
input_max: 1
input_step: 1
gcode:
    #M106 S{255 if menu.input else 0}
    SET_FAN_SPEED FAN=filter SPEED={menu.input}

[menu __main __control __case_fans __filterfanspeed]
type: input
enable: {'fan_generic filter' in printer}
name: Filt. spd: {'%3d' % (menu.input*100)}%
input: {printer['fan_generic filter'].speed}
input_min: 0
input_max: 1
input_step: 0.01
gcode:
    #M106 S{'%d' % (menu.input*255)}
    SET_FAN_SPEED FAN=filter SPEED={menu.input}

#Shutdown from: https://klipper.discourse.group/t/shutdown-command-to-the-raspberry/584/3
[delayed_gcode shutdown_machine]
gcode:
     {action_call_remote_method("shutdown_machine")}
initial_duration: 0.0
[menu __main __poweroff]
type: command
enable: {printer.idle_timeout.state != "Printing"}
name: Safely Shutdown
gcode:
     M117 Shutdown_RPI
     M118 Shutdown_RPI
     { menu.exit() }    
     UPDATE_DELAYED_GCODE ID=shutdown_machine DURATION=1 
